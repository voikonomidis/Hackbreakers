package hackbreakers.gui;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import hackbreakers.dbms.Attribute;
import hackbreakers.dbms.Database;
import hackbreakers.dbms.Entity;
import hackbreakers.dbms.EntityData;

public class ShowDatabasesJDialog extends javax.swing.JDialog {//Contains: 4 methods, 245 lines.

    /**
     * Creates new form ShowDatabasesJDialog
     */
    public ShowDatabasesJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        listOfDbsJLabel = new javax.swing.JLabel();
        databasesJComboBox = new javax.swing.JComboBox<>();
        cancelJButton = new javax.swing.JButton();
        okJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        listOfDbsJLabel.setText("List of Existing Databases to Choose from");

        cancelJButton.setText("Cancel");
        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJButtonActionPerformed(evt);
            }
        });

        okJButton.setText("OK");
        okJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(okJButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cancelJButton))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(listOfDbsJLabel)
                                                .addComponent(databasesJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(listOfDbsJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(databasesJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cancelJButton)
                                        .addComponent(okJButton))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt) {

        this.dispose();
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {

        Database db = new Database();
        List<String> dbList = db.fetchDatabasesGUI();
        for (String dbName : dbList) {
            this.databasesJComboBox.addItem(dbName);
        }
    }

    private void okJButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //Database selection.
        String dbName = (String) this.databasesJComboBox.getSelectedItem();
        //Makes a refferance to the mainFrame.
        MainFrame mainFrm = (MainFrame) this.getParent();
        //Creates the root of jTree that includes the db's name and it's entities.
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(String.valueOf(dbName));
        //Creates a jTree with the root above and sets its model.
        JTree tree = new JTree(root);
        DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
        //Connects with the db and pulls the entities.
        Database db = new Database();
        List<Entity> entList = db.fetchDatabaseEntitiesGUI(dbName);
        //Popoulates the jTree through its model.
        for (Entity ent : entList) {
            DefaultMutableTreeNode child = new DefaultMutableTreeNode(ent.getName());
            model.insertNodeInto(child, root, root.getChildCount());
            tree.scrollPathToVisible(new TreePath(child.getPath()));
        }
        //Gives jTree the potential to be single-clicked by the user and function.
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        //Adds a listener giving the potential to CreateEntityJDialog to be showed up, when the user single-clicks on it.
        tree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
                //Nothing is executed if user selects nothing.
                if (node == null) {
                    return;
                }
                //Pulls user's selection (db's name or entity name).
                Object nodeInfo = node.getUserObject();
                //Shows the dialog of new Entity Creation (CreateEntityJDialog).
                if (nodeInfo.equals(dbName)) {
                    CreateEntityJDialog createEntityJDialog = new CreateEntityJDialog(mainFrm, true);
                    createEntityJDialog.setLocationRelativeTo(mainFrm);
                    createEntityJDialog.getDatabaseNameJTextField().setText(dbName);
                    createEntityJDialog.setVisible(true);
                }
            }
        });
        //When user clicks on nodes or JTree's root then:
        tree.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    //Initializes the jTree.
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
                    if (node == null) {
                        return;
                    }
                    //Pulls user's selection (db's name or entity name).
                    Object nodeInfo = node.getUserObject();
                    //If user's selection equals to db's name shows the CreateDatabaseJDialog dialog.
                    if (nodeInfo.equals(dbName)) {
                        CreateEntityJDialog createEntityJDialog = new CreateEntityJDialog(mainFrm, true);
                        createEntityJDialog.setLocationRelativeTo(mainFrm);
                        createEntityJDialog.getDatabaseNameJTextField().setText(dbName);
                        createEntityJDialog.setVisible(true);
                    } else { //Otherwise (if user selects another db or entity.
                        //Creates the EntityJPanel.
                        EntityJPanel ejp = new EntityJPanel();
                        JTextField entity = ejp.getEntityNameJTextField();
                        entity.setText(nodeInfo.toString());
                        //Creates JTable object.
                        JTable attributes = ejp.getAttributeJTable();
                        //Pulls the entity with its attributes from the database.
                        Entity ent = db.fetchDatabaseEntityByNameGUI(dbName, nodeInfo.toString()); //nodeInfo.toString() corresponds with entity's name.
                        //Populates EntityJPanel's JTable with entity's attributes.
                        for (Attribute attr : ent.getAttributes()) {
                            TableColumn dataTypeColumn = attributes.getColumnModel().getColumn(1);
                            DefaultTableModel tableModel = (DefaultTableModel) attributes.getModel();
                            JComboBox comboBox = new JComboBox();
                            comboBox.addItem("Numeric");
                            comboBox.addItem("Characters");
                            comboBox.addItem("Boolean");
                            comboBox.addItem("Date");
                            dataTypeColumn.setCellEditor(new DefaultCellEditor(comboBox)); //Loads each one field of the second column with the combo box.
                            tableModel.addRow(new Object[]{attr.getName(), attr.getDataType().getName()});
                        }
                        //Populates DatajPanel with the entity's data.
                        //Creates theDataJPanel.
                        DataJPanel djp = new DataJPanel();
                        djp.setDbName(dbName);
                        djp.setEntity(ent);
                        JTable data = djp.getEntityDataJTable();
                        //Creates entity's colomuns od its attributes dynamically.
                        DefaultTableModel tableModel = new DefaultTableModel();
                        for (Attribute attr : ent.getAttributes()) {
                            tableModel.addColumn(attr.getName());
                        }
                        data.setModel(tableModel);
                        //Populates Jtable data with entity's data.
                        List<EntityData> entData = db.fetchDatabaseEntityDataGUI(dbName, nodeInfo.toString());
                        djp.setEntData(entData);
                        for (EntityData entityData : entData) {
                            DefaultTableModel tm = (DefaultTableModel) data.getModel();
                            tm.addRow(entityData.getRecord().toArray());
                        }
                        //Shows EntityJPanel ejp, DataJPanel djp,  JTabbedPane and dbDetailsJTabbedPane on the main frame.
                        JTabbedPane dbDetailsJTabbedPane = mainFrm.getDbDetailsJTabbedPane();
                        dbDetailsJTabbedPane.removeAll(); // For refreshing reasons every time that user selects a specific table, the tabs be re-initialized with the new entity's elements.
                        dbDetailsJTabbedPane.add("Table Info", ejp);
                        dbDetailsJTabbedPane.add("Data", djp);
                    }
                }
            }
        });

        JScrollPane jScrollPane = mainFrm.getDbObjectsTreeJScrollPane();
        jScrollPane.setViewportView(tree);
        JTabbedPane jTabbedPane = mainFrm.getDbDetailsJTabbedPane();
        jTabbedPane.removeAll();
        jTabbedPane.setVisible(true);
        JSplitPane jSplitPane = mainFrm.getMainJSplitPane();
        jSplitPane.setDividerLocation(200);
        this.dispose();
    }

    // Variables declaration - do not modify
    private javax.swing.JButton cancelJButton;
    private javax.swing.JComboBox<String> databasesJComboBox;
    private javax.swing.JLabel listOfDbsJLabel;
    private javax.swing.JButton okJButton;
    // End of variables declaration
}
